
function busyIndicator(show) {};

String.prototype.hash = function() {
  var self = this, range = Array(this.length);
  for(var i = 0; i < this.length; i++) {
    range[i] = i;
  }
  return Array.prototype.map.call(range, function(i) {
    return self.charCodeAt(i).toString(16);
  }).join('');
}

toastr.options = {
  "closeButton": false,
  "debug": false,
  "newestOnTop": false,
  "progressBar": false,
  "positionClass": "toast-top-right",
  "preventDuplicates": true,
  "onclick": null,
  "showDuration": "300",
  "hideDuration": "2000",
  "timeOut": "3000",
  "extendedTimeOut": "1000",
  "showEasing": "swing",
  "hideEasing": "linear",
  "showMethod": "fadeIn",
  "hideMethod": "fadeOut"
}

Array.prototype.removeAll = function(key){
    var index = this.indexOf(key);

    if(index === -1) return;

    this.splice(index, 1);
    this.removeAll(key);
}
L.Icon.Default.imagePath = "/images/markers";

angular.module('real.planet', [
  'ui.router',
  'leaflet-directive'
]).config(['$stateProvider','$httpProvider', '$urlRouterProvider', '$logProvider', function($stateProvider, $httpProvider, $urlRouterProvider, $logProvider) {

	    //$httpProvider.interceptors.push('realPlanetHttpInterceptor');
	    $urlRouterProvider.otherwise("/filter/")
        $logProvider.debugEnabled(false);

	  	$stateProvider
          .state('filter', {
              url: "/filter/:iso3",
              data: { isPublic: true },
	            templateUrl: "views/real.planet/real.planet.html"
	        })
	        .state('scraping', {
	            url: "/scraping",
	            data: { isPublic: false },
	            templateUrl: "views/scraping/main.html"
	        })
  	}])
    .directive("footer", function(){
        return {
          templateUrl: "views/footer.html"
        }
    })
    .run(["$rootScope", '$state', 'AuthService', function ($rootScope, $state, AuthService) {
      $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
        // if already authenticated...
        var isAuthenticated = AuthService.isAuthenticated();
        // any public action is allowed
        var isPublicAction = angular.isObject(toState.data)
                           && toState.data.isPublic === true;

        if (isPublicAction || isAuthenticated) {
          return;
        }

        event.preventDefault();

        AuthService
           .getAuthObject()
           .then(function (user) {

                var isAuthenticated = user.isAuthenticated === true;

                if (isAuthenticated) {
                  // let's continue, use is allowed
                  $state.go(toState, toParams)
                  $rootScope.currentUser = user;
                  return;
                } else{
                  $rootScope.previos = toState.name;
                  $state.go("login");
                }

           }, function(){
              $state.go("login");
           })
        })
    }]);

(function() {

    angular.module('real.planet')
    .controller("stateController", ["$rootScope", "$scope", '$state', '$location', "AuthService", function ($rootScope, $scope, $state, $location, AuthService){

        $rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams){
            $rootScope.page = toState.name;
            if($rootScope.page != "login"){
                $rootScope.previos = $rootScope.page;
            }

            AuthService.getAuthObject().then(function(user){ $rootScope.currentUser = user; });
        })

        var prov = AuthService.getSocialProviders();

        $scope.providers = {google: prov.google, facebook: prov.facebook };

        if($scope.providers.google){
            $scope.providers.google.fa = "google-plus";
        }

        if($scope.providers.facebook){
            $scope.providers.facebook.fa = "facebook-square";
        }

        function onSuccess() {
            $state.go($rootScope.previos || 'planner', {}, {reload: true});
        }

        $scope.login = function(provider){
            AuthService.auth(provider).then(onSuccess);
        }

        $scope.logout = function(){
            AuthService.logout().then(function(){ $state.go("filter", {}, {reload: true}); });
        }

    }])
})();

(function() {

    angular.module('real.planet')
        .controller('filterController', ["$scope", "$stateParams", "map", "filterModules", "leafletData", "AuthService", filterController]);

    function filterController($scope, $stateParams, map, filterModules, leafletData, AuthService){

        map.initialize($scope, {
            canAddMarkers: false,
            placemarkControl: false,
            searchControl: false,
            mapProvider: "Esri.OceanBasemap",//"Stamen.Watercolor",//"OpenMapSurfer.Grayscale",
            mapOpt:{
                click: function(){
                        filterModules.deactivateCountry();
                    }
                }
            });

        map.getMap().then(function(map){
            AuthService.getAuthObject().then(function(user){
                initFilters(map, user, $stateParams.iso3);
            });
        });

        function initFilters(map, user, country){
            filterModules.initialize(map, user).then(function(){
                $scope.moduleManager = filterModules.moduleManager;
            }).then(function(){
                filterModules.initDefaults(country);
                if(country){
                    filterModules.activateCountryByIso(country);
                } else {
                    filterModules.evaluateMap();
                }
            });
        }

        $scope.checkFilter= function(opt){
            if(filterModules.canChangeFilters()){
                opt.checked = !opt.checked;
                filterModules.evaluateMap();
            }
        };

        $scope.checkModule= function(targetModule){
            if(filterModules.canChangeFilters()){
                var active = $(targetModule.options).filter(function(){
                    return this.checked;
                });

                $(targetModule.options).filter(function(){
                    this.checked = active.length == 0;
                    var current = $("[rw-module='" +targetModule.name+"'] input[value='"+this.alias+"']");
                    if(this.checked){
                        if(!current.parent().is(".active")){
                            current.parent().button("toggle");
                        }
                    }else{
                        if(current.parent().is(".active")){
                            current.parent().button("toggle");
                        }
                    }
                    return false;
                });

                filterModules.evaluateMap();
            }
        };

        $scope.selectMount= function(index){
            if(filterModules.canChangeFilters()){
                $scope.moduleManager.weather._selected = index;
                $scope.moduleManager.rain._selected = index;
                filterModules.monthChanged();
            }
        };

        $scope.highlightHeader = function(module){
            return filterModules.canChangeFilters() && $(module.options).filter(function(){
                return this.checked;
            }).length;
        }

    }

})();


(function () {

      angular.module('real.planet')
          .service('CRUDService', ['$http', 'endpoints', CRUDService]);

    function CRUDService($http, endpoints){

        var self = angular.extend(this, endpoints);

        self.readAll = function (table) {
            return $http({
                method: 'GET',
                url: self.baseUrl + table
            }).then(function(response) {
                return response.data.data;
            });
        };

        self.readOne = function (id, table) {
            return $http({
                method: 'GET',
                url: self.baseUrl + table + '/' + id,
                params: {
                    deep: true
                }
            }).then(function(response) {
                return response.data;
            });
        };

        self.create = function (data, table) {
            return $http({
                method: 'POST',
                url : self.baseUrl + table,
                data: data,
                params: {
                    returnObject: true
                }
            })
            .then(function(r){
                toastr["success"]("Item was successfully added."); return r;
            })
            .then(function(response) {
                return response.data;
            });
        };

        self.update = function (id, data, table) {
            return $http({
                method: 'PUT',
                url : self.baseUrl + table + '/' + id,
                data: data,
                params: {
                    returnObject: true
                }
            })
            .then(function(r){
                toastr["success"]("Item was successfully updated."); return r;
            })
            .then(function(response) {
                return response.data;
            });
        };

        self.delete = function (id,table) {
            return $http({
                method: 'DELETE',
                url : self.baseUrl + table + '/' + id,
                params: {
                    returnObject: true
                }
            })
            .then(function(r){
                toastr["success"]("Item was successfully deleted."); return r;
            });
        };
    }

}());

(function () {

    angular.module('real.planet')
        .factory('AuthService', ['$q', '$http', '$location', AuthService]);

    function AuthService($q, $http, $location) {

        var self = {};
        var baseUrl = '/';

        var user = undefined;

        function getCurrentUserInfo(value) {
            return $http({
                method: 'GET',
                url: baseUrl + "getUserDetails"
            }).then(function (response) {
                if (response.data && response.data.length == 1)
                    return response.data[0];
            });
        };

        return {
                    getAuthObject: function (){
                        var deferred = $q.defer();

                        if (user) {
                            return $q.when(user);
                        }

                        if (false) {
                            getCurrentUserInfo(Backand.getUsername())
                                    .then(function (data) {
                                        user = data;
                                        user.isAuthenticated = true;
                                        deferred.resolve(user);
                                    });
                        }else{
                            deferred.resolve({isAuthenticated: false});
                        }

                        return deferred.promise;
                    },

                    getUser: function(){
                        return user;
                    },

                    clearUser: function(){
                        user = undefined;
                        return this.getAuthObject();
                    },

                    getSocialProviders: function () {
                        return []
                    },

                    auth: function(provider, success){
                        var deferred = $q.defer();
                        Backand.socialSignIn(provider).then(function(){
                            deferred.resolve();
                        }, function(){
                            Backand.socialSignUp(provider).then(function(){
                                $http ({
                                    method: 'GET',
                                    url: Backand.getApiUrl() + '/1/query/data/createDefaultTrip'
                                    }).then(function(response) {
                                        deferred.resolve();
                                        return response.data;
                                    }, function(){
                                        deferred.resolve();
                                    });
                            });
                        });

                        return deferred.promise;
                    },

                    logout: function () {
                        var deferred = $q.defer();
                        Backand.signout().then(function () {
                            user = undefined;
                            $location.path("/");
                            deferred.resolve();
                        });

                        return deferred.promise;
                    },

                    isAuthenticated: function () {
                        return user !== undefined
                            && user.isAuthenticated;
                    }
                }
    }

}());

(function () {

    function endpoints(){
    }

    angular.module('real.planet')
        .service('endpoints', [endpoints]);
}());

(function() {

    angular.module('real.planet').service('dragDrop', ["PlannerService", dragDrop]);

    function dragDrop(PlannerService){

        var self = this;

        function FileDragHover(e) {
            e.stopPropagation();
            e.preventDefault();
            //e.target.className = (e.type == "dragover" ? "hover" : "");
        }

        // file selection
        function FileSelectHandler(e) {

            // cancel event and hover styling
            FileDragHover(e);

            // fetch FileList object
            var files = e.target.files || e.dataTransfer.files;

            // process all File objects
            for (var i = 0, f; f = files[i]; i++) {
                ParseFile(f);
            }

        }

        function ParseFile(file){
            if (file.name.indexOf(".kml") != -1) {
                var reader = new FileReader();
                reader.onload = function(e) {
                    var droppedKML = $.parseJSON(xml2json($.parseXML(e.target.result)).replace("\nundefined",""));
                    addNewDroppedTrip(droppedKML.kml.Document.name);

                }
                reader.readAsText(file);
            }

            if(file.name.indexOf("world-heritage") != -1){
                var reader = new FileReader();
                reader.onload = function(e) {
                    var places = $.parseJSON(e.target.result);
                    var trips = {};
                    $.getJSON(RW.path.countries.all(), function(data){
                        var features = data.features;
                        $(places).filter(function(){
                            var place = this;
                            var country = $(features).filter(function(){
                                return this.id == place.target;
                            });
                            if(country.length){
                                var countryName = country[0].properties.name;
                                if(trips.hasOwnProperty(countryName)){
                                    trips[countryName].push(place);
                                } else {
                                    trips[countryName] = [place];
                                }
                            } else {
                                console.log(place.target);
                            }

                            return true;
                        });

                        for(var t in trips){
                            var data = trips[t];
                            var p = Date.now();
                            PlannerService.addNewTrip(t, p).then(function(response){
                                var trip = response.data[0];
                                var collect = {};
                                $(data).filter(function(){
                                    var place = this;
                                    if(collect.hasOwnProperty(place.type)){
                                        collect[place.type].push({name: place.name, description: place.shortInfo, picture: place.image, coordinates: place.lat + "," + place.lng, tag: place.regionLong});
                                    } else {
                                        collect[place.type] = [{name: place.name, description: place.shortInfo, picture: place.image, coordinates: place.lat + "," + place.lng, tag: place.regionLong}];
                                    }

                                    return true;
                                });

                                for (var name in collect) {
                                    var style = "red";
                                    switch(name){
                                        case "Mixed":
                                            style = "yellow";
                                        break;
                                        case "Natural":
                                            style = "green";
                                        break;
                                    }
                                    addNewDroppedCollection({name: name, description: "", style : style, trip: trip.id}, collect[name]);
                                }
                            })
                        }
                    });
                }
                reader.readAsText(file);
            }
        }

        function addNewDroppedTrip(name){
            PlannerService.addNewTrip(name).then(function(response){
                var trip = response.data[0];
                addNewDroppedCollection({name: "Default", description: "Default collection for " + trip.name + "", style : "red", trip: trip.id}, parceKMLmarks(droppedKML.kml.Document.Placemark));
            })
        }

        function addNewDroppedCollection(collection, marksCollection){
            PlannerService.createCollection(collection).then(function(collection){
                $(marksCollection).each(function(){
                    var mark = this;
                    mark.collection = collection.id;
                    PlannerService.addMark(mark);
                });
            })
        }

        function parceKMLmarks(placemarksArray){
            var result = [];

            $(placemarksArray).each(function(){
                var mark = this;
                var coord = mark.Point.coordinates.split(",")[1] + "," + mark.Point.coordinates.split(",")[0];
                result.push({
                    name: mark.name,
                    coordinates: coord,
                    description: mark.description || ""
                })
            })

            return result;
        }

        function InitDragAndDrop(target){
            var filedrag = document.getElementById(target);

            filedrag.addEventListener("dragover", FileDragHover, false);
            filedrag.addEventListener("dragleave", FileDragHover, false);
            filedrag.addEventListener("drop", FileSelectHandler, false);
        }

        self.initialize = function(target){
            if (window.File && window.FileList && window.FileReader) {
                InitDragAndDrop(target);
            } else{
                console.log("Drag and Drop is not accessible.");
            }
        }
}
})();

(function() {

    angular.module('real.planet')
        .service('filterModules', ["$q", "$state", "countriesService", "budgetService", "visaService", "touristService", "safetyService", "internetService", "weatherService", "rainService", filterModules]);

    function filterModules($q, $state, countriesService, budgetService, visaService, touristService, safetyService, internetService, weatherService, rainService){
        var self = this;

        self._content = "/data/";//"//igor-vladyka.github.io/realplanet/data/";

        function colorSelector(color){
            switch(color){
                //case 'green': color = '#00c46b';break;
                //case 'yellow': color = '#caa231';break;
                case 'orange': color = '#ca6531';break;
                //case 'red': color = '#dc340c';break;
                //case 'blue': color = '#A4A5F9';break;
            }

            return color;
        }

        function resetOptions(module){
            $(module.options).each(function(){
                this.checked = false;
            });
        }

        self.style = {
            country_default: function (feature) {
                if(self.moduleManager.country){
                    if(self.moduleManager.country.getId() == feature.getId()){
                        return ({
                            weight: 0,
                            fillColor: colorSelector("orange"),
                            color: colorSelector("orange"),
                            opacity: 1,
                        });
                    }
                }

                return ({
                    weight: 0,
                    fillColor: "transparent",
                    color: "transparent",
                    opacity: 0,
                });
            }
        };

        self.initialize = function (map, user){

            self.moduleManager = { modules: [] };

            self.boundsMap = map;

            var promises = [];

            var countryPromise = countriesService.load(map, self._content, self.style.country_default, self.activateCountry);
            promises.push(countryPromise);

            resetOptions(budgetService);
            self.moduleManager.modules.push(budgetService);
            self.moduleManager[budgetService.name] = budgetService;
            promises.push(budgetService.load(self._content));

            if(user.homeCountry){
                visaService.initUserSettings(user.schengenVisa, user.usaVisa, user.homeCountry);
                self.moduleManager.modules.push(visaService);
                self.moduleManager[visaService.name] = visaService;
                promises.push(visaService.load(self._content));

            } else {

                $(budgetService.options).each(function(){
                    this.checked = true;
                });

            }

            resetOptions(touristService);
            self.moduleManager.modules.push(touristService);
            self.moduleManager[touristService.name] = touristService;
            promises.push(touristService.load(self._content));

            resetOptions(safetyService);
            self.moduleManager.modules.push(safetyService);
            self.moduleManager[safetyService.name] = safetyService;
            promises.push(safetyService.load(self._content));

            resetOptions(internetService);
            self.moduleManager.modules.push(internetService);
            self.moduleManager[internetService.name] = internetService;
            promises.push(internetService.load(self._content));

            resetOptions(weatherService);
            self.moduleManager.modules.push(weatherService);
            self.moduleManager[weatherService.name] = weatherService;
            promises.push(weatherService.load(self._content));

            resetOptions(rainService);
            self.moduleManager.modules.push(rainService);
            self.moduleManager[rainService.name] = rainService;
            promises.push(rainService.load(self._content));

            return $q.all(promises);
        }

        self.initDefaults = function(country){
            setTimeout(function(){
                $("input:checked").parent("label:not(.active)").button("toggle");
                weatherService.monthPanel().find("input:radio[value='" + weatherService._selected+"']").parent().button("toggle");
                rainService.rainPanel().find("input:radio[value='" + rainService._selected+"']").parent().button("toggle");
                if(country){
                    weatherService.monthPanel().show();
                    rainService.rainPanel().show();
                }
            }, 100)
        }

        self.evaluateMap = function (){
            self.activeFilters = [];

            $(self.moduleManager.modules).each(function(){
                var module = this;
                if(module.options){
                    var active = {name: module.name, aliases: [], origin: module};
                    var isActives = $(module.options).filter(function(){
                        if(this.checked){
                            active.aliases.push(this.alias);
                        }
                        return this.checked;
                    });

                    if(isActives.length){
                        self.activeFilters.push(active);
                    }
                }
            })

            if(self.activeFilters.length){
                if(self.activeFilters.length == 1){
                    countriesService.layer.setStyle(self.setupSinglefilter);
                }else{
                    countriesService.layer.setStyle(self.setupMultifilter);
                }
            }else{
                countriesService.layer.setStyle(self.style.country_default);
            }

            $(self.moduleManager.modules).each(function(){
                var module = this;
                if(module["evaluateGlobal"]){
                    module["evaluateGlobal"](self.activeFilters);
                }
            });
        }

        self.setupSinglefilter = function(feature){
            var color = "gray";

            var mod = self.activeFilters[0];
            var resultFromSection = mod.origin.setup(feature);

            if ($.inArray(resultFromSection, mod.aliases) != -1){
                color = resultFromSection;
            }

            return ({
                weight: 0,
                fillColor: colorSelector(color),
                color: colorSelector(color),
                opacity: 1,
            });
        };

        self.setupMultifilter = function(feature){
            var color = "gray";
            var result = true;
            $(self.activeFilters).each(function(){
                var mod = this;
                var resultFromSection = mod.origin.setup(feature);
                result = $.inArray(resultFromSection, mod.aliases) != -1;
                return result;
            });

            if (result){
                color = "green";
            }

            return ({
                weight: 0,
                fillColor: colorSelector(color),
                color: colorSelector(color),
                opacity: 0.8,
            });
        };

        self.monthChanged = function(){
            if(self.moduleManager.country){
                self.evaluateModules(self.moduleManager.country);
            } else{
                self.evaluateMap();
            }
        }

        self.deactivateCountry = function(){
            self.moduleManager.country = null;
            self.evaluateMap();
            self.evaluateModules();
            $state.transitionTo('filter', null, { location: true, notify: false });
        }

        self.activateCountryByIso = function(iso3){
            var country = countriesService.getCountryByIso(iso3);
            var bounds = new L.LatLngBounds(new L.LatLng(country.c.properties.min[1], country.c.properties.min[0]),
                                            new L.LatLng(country.c.properties.max[1], country.c.properties.max[0]));
            self.activateCountry(country.c, country.l, bounds);

        }

        self.activateCountry = function(active, layer, bounds){
            if(self.moduleManager.country && self.moduleManager.country.getId() == active.getId())
            {
                self.deactivateCountry();
                self.boundsMap.setView(L.latLng(0, 0),3);
            } else {
                self.moduleManager.country = active;
                self.evaluateModules(active);
                layer.setStyle(self.style.country_default);
                $state.transitionTo('filter', { iso3: active.properties.ISO3 }, { location: true, notify: false });
                self.boundsMap.fitBounds(bounds);
            }
        }

        self.evaluateModules = function(active){
            $(self.moduleManager.modules).each(function(){
                var module = this;
                if(module["evaluateCountry"]){
                    module["evaluateCountry"](active);
                }
            });
        }

        self.canChangeFilters = function (){
            return self.moduleManager.country == null;
        }
    }

})();


(function() {

    angular.module('real.planet').service('kml', kml);

    function kml(){

        var self = this;
        self.styles = ["red","blue","brown", "green", "orange", "pink", "purple", "yellow"];

        self.CreateKML = function(name, collection){
            download("MyTrip.kml", tripToKML(self.styles, name, collection));
        }

        function download(filename, text) {
            var element = document.createElement('a');
            element.setAttribute('href', 'data:application/vnd.google-earth.kml+xml;charset=utf-8,' + encodeURIComponent(text));
            element.setAttribute('download', filename);

            element.style.display = 'none';
            document.body.appendChild(element);

            element.click();

            document.body.removeChild(element);
        }

        function tripToKML(styles, name, collection){
            var kmlBaseTemplate = '<?xml version="1.0" encoding="UTF-8"?><kml xmlns="http://earth.google.com/kml/2.2">{document}</kml>';
            var styleTemplate = '<Style id="placemark-{style}"><IconStyle><Icon><href>http://mapswith.me/placemarks/placemark-{style}.png</href></Icon></IconStyle></Style>';
            var placeMarkTemplate = '<Placemark><name><![CDATA[{name}]]></name><description><![CDATA[{description}]]></description><styleUrl>#placemark-{style}</styleUrl><Point><coordinates>{coordinates}</coordinates></Point></Placemark>';
            var endDocumentReplaceTemplate = "</Document>";
            var startDocumentReplaceTemplate = "<Document>";
            var doc = {Document: { name: name, visibility: 1 }}

            var result = kmlBaseTemplate.replace("{document}",json2xml(doc));

            $(styles).each(function(){
                var color = this;
                result = result.replace(startDocumentReplaceTemplate, startDocumentReplaceTemplate + styleTemplate.replace("{style}", color).replace("{style}", color));
            })

            $(collection).each(function(){
                var coll = this;
                $(coll.placemarks).each(function(){
                    var mark = this;
                    var lat = mark.coordinates.split(',')[0];
                    var lng = mark.coordinates.split(',')[1];
                    var desc = coll.name;
                    if(mark.description){
                        desc = desc + "\r\n" + mark.description
                    }
                    result = result.replace(endDocumentReplaceTemplate, placeMarkTemplate.replace("{name}", mark.name).replace("{description}", desc).replace("{style}", coll.style).replace("{coordinates}", lng + "," + lat) + endDocumentReplaceTemplate);
                })
            })

            return result;
        }

}
})();

(function() {

	var mapsMeIconTemplate = "http://mapswith.me/placemarks/placemark-{style}.png";

    angular.module('real.planet').service('map',["$q", "leafletData", "MapControls", "AuthService", map]);

    function map($q, leafletData, MapControls, AuthService){

        var self = this;

        self.bounds = new L.LatLngBounds(new L.LatLng(150, -300), new L.LatLng(-150, 300));

        self.markerClusterFunction = function(cluster) {
            return new L.DivIcon({
                html: '<div><span>' + cluster.getChildCount() + '</span></div>',
                className: 'marker-cluster marker-cluster-' + this.style,
                iconSize: new L.Point(40, 40)
            });
        }

        self.createClusterLayer = function(style){
            var opt = {
                        showCoverageOnHover: false,
                        iconCreateFunction: self.markerClusterFunction,
                        style: style
                    };

            if(AuthService.getUser() != null && !AuthService.getUser().clasterization){
                opt.disableClusteringAtZoom = 1;
            }

            return new L.markerClusterGroup(opt);
        }

        self.initialize = function($scope, options){

            self.newPlacemarkLayer = new L.FeatureGroup();

            self.layerGroups = {};

            self.allLayerGroupsObjects = [];

            self.scope = $scope;

            var defaultOptions = {
                mapProvider: 'MapQuestOpen.OSM',
                canAddMarkers: true,
                placemarkControl: true,
                searchControl: true,
                routeControl: false,
                mapOpt: {
                    click: function(e) {
                        if(MapControls.placemark().isVisible()){
                            self.newPlacemarkLayer.clearLayers();
                            MapControls.placemark().hide();
                        } else {
                            var latLng = [e.latlng.lat, e.latlng.lng];
                            self.addPlacemark(latLng, null);
                        }
                    }
                }
            }

            self.options = angular.extend(defaultOptions, options || {});

            self.mapId = self.options.mapId;

            angular.extend(self.scope, {
                center: {
                    autoDiscover: true,
                    zoom: 3
                },
                maxbounds: self.bounds,
                hidePlacemarkControl: function (){
                    self.newPlacemarkLayer.clearLayers();
                    this._imageIsHidden = $("#placemarkImageSection:visible").length > 0;
                    MapControls.placemark().hide();
                }
            });

            leafletData.getMap(self.mapId).then(function(map){

                map.addLayer(self.newPlacemarkLayer);

                L.tileLayer.provider(self.options.mapProvider).addTo(map);

                if(self.options.placemarkControl)
                {
                    map.addControl(MapControls.placemark(self.scope));

                    $("[data-lightbox]").on('click', function (){
                        $(this).lightBox();
                    });
                }

                if(self.options.searchControl){
                    if(!MapControls.isSearchPresent())
                    {
                        map.addControl(MapControls.search(self.searchCallback));
                        MapControls.searchStyles();
                    } else {
                        MapControls.showSearch();
                    }
                } else {
                    MapControls.hideSearch();
                }

                if(self.options.routeControl){
                    MapControls.route().addTo(map);
                }

                map.on(self.options.mapOpt);
            })
        }

        self.resetMap = function(){
            self.getRouteControl().spliceWaypoints(0, self.getRouteControl().getWaypoints().length);
            self.routes = [];
            self.clearAllLayers();
            self.layerGroups = {};
        }

        self.getRouteControl = function(array){
            if(array){
                var waypoints = [];
                $(array).each(function(){
                    waypoints.push(this.latLng);
                });

                return MapControls.route().setWaypoints(waypoints);
            } else {
                return MapControls.route();
            }
        }

        self.getMap = function (){
            var deferred = $q.defer();
            leafletData.getMap(self.mapId).then(function(map){ deferred.resolve(map); });
            return deferred.promise;
        }

        self.searchCallback = function(bounds, latLng, name){
            RW.map.fitBounds(bounds);
            self.addPlacemark(latLng, name);
        }

        self.toggleLayerGroups = function(name, boolValue){
            var layer = self.layerGroups[name];

            leafletData.getMap(self.mapId).then(function(map){

                if(boolValue){

                    if(!map.hasLayer(layer)){
                        layer.addTo(map);
                    }

                } else {

                    if(map.hasLayer(layer)){
                        map.removeLayer(layer);
                    }

                }
            });
        }

        self.clearAllLayers = function(){
            for (var l in self.layerGroups)
            {
                self.layerGroups[l].clearLayers();
            }

            self.allLayerGroupsObjects = [];
        }

        self.addLayerGroup = function(name, collection, style){
            leafletData.getMap(self.mapId).then(function(map){
                    var items = [];
                    $(collection).filter(function(){
                        var latLng = self.createLatLngFromStringCoordinates(this.coordinates);
                        this.latLng = latLng;
                        items.push(self.createMarker(latLng, style));
                        self.allLayerGroupsObjects.push(this);
                        return true;
                    });

                    if (!self.layerGroups[name]){
                        self.layerGroups[name] = self.createClusterLayer(style);
                        map.addLayer(self.layerGroups[name]);
                    }

                    self.layerGroups[name].addLayers(items);
            });
        }

        self.addLayerGroupItem = function(name, item, style){
            leafletData.getMap(self.mapId).then(function(map){
                    var latLng = self.createLatLngFromStringCoordinates(item.coordinates);
                    item.latLng = latLng;

                    var obj = self.createMarker(latLng, style);
                    self.allLayerGroupsObjects.push(item);

                    if (!self.layerGroups[name]){
                        self.layerGroups[name] = self.createClusterLayer(style);
                        map.addLayer(self.layerGroups[name]);
                    }

                    self.layerGroups[name].addLayer(obj);
            });
        }

        self.createLatLngFromStringCoordinates = function(coordinates){
            var lat = coordinates.split(',')[0];
            var lng = coordinates.split(',')[1];

            return [lat, lng];
        }

        self.createMarker = function(latLng, style){
            var icon = L.icon({iconUrl: mapsMeIconTemplate.replace("{style}", style), iconAnchor: [9,24]});

            var marker = L.marker(latLng, {icon: icon}).on("click", function(m){
                MapControls.placemark().show();
                self.newPlacemarkLayer.clearLayers();
                self.scope.placemark = $(self.allLayerGroupsObjects).filter(function(){ return this.coordinates === m.latlng.lat + "," + m.latlng.lng})[0];

                self.scope.$apply();
            });

            self.scope.placemark = null;

            return marker;
        }

        self.addPlacemark = function (latLng, name){
            if(self.options.canAddMarkers){
                MapControls.placemark().show();

                self.newPlacemarkLayer.clearLayers();

                L.marker(latLng).addTo(self.newPlacemarkLayer);

                self.scope.placemark = {
                    "name": name || "",
                    "coordinates": latLng.toString(),
                    "collection": {}
                }

                self.scope.$apply();
            }
        }
    }
})();

(function() {

    angular.module('real.planet')
        .service('MapControls', ["$compile", MapControls]);

        function MapControls($compile){
            var self = this;

            self.placemark = function (scope){
                self.scope = scope;
                if(!self._placemark){
                    self._placemark = L.Control.extend({
                        onAdd: function(map){
                            this.html = $("#placemarkModal").html();

                            $("#placemarkModal").replaceWith();

                            this._container = $compile(this.html)(self.scope)[0];

                            L.DomEvent.disableClickPropagation(this._container);

                            return this._container;
                        },
                        hide: function(){
                            $('#placemarksControl').hide();
                        },
                        show: function(){
                            $('#placemarksControl').show();
                        },
                        isVisible: function(){
                            return $('#placemarksControl:visible').length;
                        }
                    });

                    self._placemark = new self._placemark();
                }

                 return self._placemark;
            }

            self.search = function(searchCallback){
                self._searchControl = new L.Control.Search({
                    container: "searchControl",
                    url: 'http://nominatim.openstreetmap.org/search?format=json&q={s}',
                    jsonpParam: 'json_callback',
                    propertyName: 'display_name',
                    propertyLoc: ['lat','lon'],
                    circleLocation: false,
                    markerLocation: false,
                    autoType: true,
                    autoCollapse: false,
                    minLength: 2,
                    zoom: 13,
                    formatData: function(json){
                        var propName = this.options.propertyName,
                            jsonret = {};

                        var control = this;
                        $(json).each(function(){
                            var j = this;
                            jsonret[control._getPath(j, propName) ] = j;
                        });

                        return jsonret;
                    }
                });

                self._searchControl.on('search_locationfound', function(e) {
                    var southWest = L.latLng(e.latlng.boundingbox[0], e.latlng.boundingbox[2]),
                        northEast = L.latLng(e.latlng.boundingbox[1], e.latlng.boundingbox[3]),
                        bounds = L.latLngBounds(southWest, northEast);

                    if(searchCallback){
                        searchCallback(bounds, [e.latlng.lat, e.latlng.lon], e.text);
                    }

                });

                return self._searchControl;
            }

            self.hideSearch = function (){
                if(self._searchControl){
                    $("#searchControl").hide();
                }
            }

            self.showSearch = function (){
                if(self._searchControl){
                    $("#searchControl").show();
                }
            }

            self.searchStyles = function (){
                $(".leaflet-control-search").addClass("input-group").addClass("search-exp");
                $("input.search-input").addClass("form-control").show();
                $("a.search-button").replaceWith('<span class="input-group-btn"><a class="search-button" href="#" title="Search..."></a></span>');
                $("a.search-cancel").addClass("z-index-5");
            }

            self.isSearchPresent = function(){
                return $(".search-exp").length;
            }

            self.route = function(){
                var plan = L.Routing.plan(null, {addWaypoints: false, draggableWaypoints:false, createMarker: function(){}});

                if(!self._route)
                {
                    self._route = L.Routing.control({
                        position:'bottomleft',
                        waypoints: null,
                        plan: plan,
                        routeWhileDragging: false,
                        showAlternatives: false
                    });
                }

                return self._route;
            }
    }

})();

(function() {

    angular.module('real.planet')
        .service('baseFilterService', ["$q", baseFilterService]);

    function baseFilterService($q){
        var self = this;

        self.initialLoad = function (path){
            var deferred = $q.defer();

            if (Storage !== "undefined" && localStorage[path])
            {
                var data = JSON.parse(localStorage[path]);
                deferred.resolve(data);
            } else {
                 $.getJSON(path, function(data) {
                    if(Storage !== "undefined"){
                        localStorage[path] = JSON.stringify(data);
                    }
                    deferred.resolve(data);
                });
            }

            return deferred.promise;
        };

        self.getDataItem = function (feature, data) {

            var id = feature.getId();
            var item = null;
            var itemArray = $.grep(data, function (e) { return e.target === id; });

            if (itemArray.length > 0) {
                item = itemArray[0];
            }

            return item;
        };

        self.getCountryOption = function(feature, options, setup){
            var opt = null;
            if(feature){
                var alias = setup(feature);
                opt = $(options).filter(function(){ return this.alias == alias});
                if(opt && opt.length){
                    opt = opt[0];
                } else{
                    opt = {text: " ", icon: { class: ""}, alias: alias};
                }
            }

            return opt;
        };
    }

})();


(function() {

    angular.module('real.planet')
        .service('budgetService', ["$q", "baseFilterService", budgetService]);

    function budgetService($q, baseFilterService){
        var self = angular.extend(this, baseFilterService);

        self._file = "budget/real.planet.budget.json";
        self.name = "budget";
        self.icon = {i: true, class: "icon-budget-main", text: "Budget"};
        self.order = 2;
        self.options = [
                {alias:"blue", text: "Cheapest", checked: false, icon: {i: true, class: "icon-budget-green-filter", cellWidth: "25%"}},
                {alias:"green", text: "Really nice", checked: false, icon: {i: true, class: "icon-budget-yellow-filter", cellWidth: "25%"}},
                {alias:"yellow", text: "Can afford", checked: false, icon: {i: true, class: "icon-budget-orange-filter", cellWidth: "25%"}},
                {alias:"red", text: "Highest costs", checked: false, icon: {i: true, class: "icon-budget-red-filter", cellWidth: "25%"}}
            ];

        self.load = function (path){
            return self.initialLoad(path + self._file).then(function(data){ self.data = data; });
        };

        self.setupCountry = function (feature) {
            return self.setup(feature);
        };

        self.setup = function (feature) {
            var item = self.getDataItem(feature, self.data);

            return item ? item.alias : 'gray';
        };

        self.evaluateCountry = function(feature){
            self.activeCountry = self.getCountryOption(feature, self.options, self.setup);
        };
    }

})();


(function() {

    angular.module('real.planet')
        .service('countriesService', ["$q", "baseFilterService", countriesService]);

    function countriesService($q, baseFilterService){
        var self = angular.extend(this, baseFilterService);

        self.path = "country/real.planet.countries.low.json";

        self.layer = {};

        self.countries = {}

        self.load = function (map, path, defaultStyles, activateCountryCallback) {
            var deferred = $q.defer();

            self.initialLoad(path + self.path).then(function(data) {

                self.layer = L.geoJson(data, {
                    style: defaultStyles,
                    onEachFeature: function (feature, layer) {
                        feature.getId = function(){ return this.id; }
                        self.countries[feature.properties.ISO3] = {c: feature};
                        layer.on("click", function(e){
                            if(activateCountryCallback){
                                activateCountryCallback(feature, self.layer, e.target.getBounds());
                            }
                        });
                    }
                });

                self.layer.addTo(map);

                for(var m in self.countries){
                    self.countries[m].l = self.layer;
                }

                deferred.resolve();
            });

            return deferred.promise;
        };

        self.getCountryByIso = function(iso3){
            return self.countries[iso3];
        }
    }

})();


(function() {

    angular.module('real.planet').service('internetService', ["$q", "baseFilterService", internetService]);

    function internetService($q, baseFilterService){
        var self = angular.extend(this, baseFilterService);

		self.name = "internet";

		self._file = "internet/real.planet.internet.json";

		self.icon = {i: true, class: "icon-internet-main", text: "Internet"};

		self.order = 5;

		self.options = [
				{alias:"blue", text: "Wifi everywhere", checked: false, icon: {i: true, class: "icon-internet-green-filter", cellWidth: "25%"}},
				{alias:"green", text: "Easy access", checked: false, icon: {i: true, class: "icon-internet-yellow-filter", cellWidth: "25%"}},
				{alias:"yellow", text: "Wifi can be found", checked: false, icon: {i: true, class: "icon-internet-orange-filter", cellWidth: "25%"}},
				{alias:"red", text: "OMG no internet...", checked: false, icon: {i: true, class: "icon-internet-red-filter", cellWidth: "25%"}}
			];

		self.load = function (path){
			return self.initialLoad(path + self._file).then(function(data){ self.data = data; });
		};

        self.setupCountry = function (feature) {
            return self.setup(feature);
        };

        self.setup = function (feature) {
            var item = self.getDataItem(feature, self.data);

            return item ? item.alias : 'gray';
        };

        self.evaluateCountry = function(feature){
        	self.activeCountry = self.getCountryOption(feature, self.options, self.setup);
        };
	}

})();


(function() {

    angular.module('real.planet').service('rainService', ["$q", "baseFilterService", rainService]);

    function rainService($q, baseFilterService){
        var self = angular.extend(this, baseFilterService);

		self._selected = new Date().getMonth() + 1;

		self.name = "rain";

		self._file = "weather/real.planet.weather.json";

		self.icon = {i: true, class: "icon-weather-main", text: "Rains"};

		self.order = 6;

		self.options = [
                {alias:"red", text: "No raint at all", checked: false, icon: {i: true, class: "icon-fire", cellWidth: "20%"}},
				{alias:"yellow", text: "True rare", checked: false, icon: {i: true, class: "icon-weather-green-filter", cellWidth: "20%"}},
				{alias:"green", text: "Sometimes", checked: false, icon: {i: true, class: "icon-weather-yellow-filter", cellWidth: "20%"}},
				{alias:"blue", text: "Happens", checked: false, icon: {i: true, class: "icon-weather-orange-filter", cellWidth: "20%"}},
                {alias:"white", text: "Alwais rainy", checked: false, icon: {i: true, class: "icon-weather-red-filter", cellWidth: "20%"}},
			];

		self.months = [{index: 1, name: "Jan", class:"width-33 divider-border-vertical-right"},
				{index: 2, name: "Feb", class:"width-34 divider-border-vertical-center"},
				{index: 3, name: "Mar", class:"width-33 divider-border-vertical-left"},
				{index: 4, name: "Apr", class:"width-33 divider-border-vertical-right"},
				{index: 5, name: "May", class:"width-34 divider-border-vertical-center"},
				{index: 6, name: "June", class:"width-33 divider-border-vertical-left"},
				{index: 7, name: "July", class:"width-33 divider-border-vertical-right"},
				{index: 8, name: "Aug", class:"width-34 divider-border-vertical-center"},
				{index: 9, name: "Sept", class:"width-33 divider-border-vertical-left"},
				{index: 10, name: "Oct", class:"width-33 divider-border-vertical-right"},
				{index: 11, name: "Now", class:"width-34 divider-border-vertical-center"},
				{index: 12, name: "Dec", class:"width-33 divider-border-vertical-left"}];

		self.rainPanel = function (){return $("#monthPanel");};

        self.calculate = function (rainfall){
            if(rainfall < 10){
                return "red";
            }

            if(rainfall < 50){
                return "yellow";
            }

            if(rainfall < 120){
                return "green";
            }


            if(rainfall < 200){
                return "blue";
            }

            return "white";
        }

        self.mapper = function(data){
            var newData = data.map(function(root){
                return {
                    target: root.target,
                    months: root.months.map(function(m){
                        return {
                            number: m.number,
                            alias: self.calculate(m.rainfall),
                            name: m.name
                        }
                    })
                }
            })
            return data;
        }

		self.load = function (path){
			return self.initialLoad(path + self._file).then(function(data){ self.data = self.mapper(data); });
		};

		self.setup = function (feature) {

			var color = 'gray';

			var weather = self.getDataItem(feature, self.data);

			if (weather != null) {
				var month = $.grep(weather.months, function (e) { return e.number === self._selected; });
				color = month[0].alias;
			}

			return color;
		};

		self.setupMonth = function (feature, index) {
			var color = 'gray';

			var weather = self.getDataItem(feature, self.data);

			if (weather != null) {
				var month = $.grep(weather.months, function (e) { return e.number === index; });
				color = month[0].alias;
			}

			return color;
		};

		self.evaluateCountry = function(feature){
			if(feature){
				$(self.months).filter(function(){
					this.alias = self.setupMonth(feature, this.index);
					var a = this.alias;
					this.icon = self.getCountryOption(feature, self.options, function(){return a;});
					return true;
				});
				self.rainPanel().show();
				self.activeCountry = {};
			}else{
				$(self.months).filter(function(){
					this.alias = null;
					this.icon = null;
					return true;
				});
				self.rainPanel().hide();
				self.activeCountry = null;
			}
		};

		self.evaluateGlobal = function(activeFilters){
			var showRainPanel = $.grep(activeFilters, function (e) { return e.name === self.name; }).length > 0;
			if(showRainPanel){
				self.rainPanel().show();
			}else{
				self.rainPanel().hide();
			}
		};

	}

})();


(function() {

    angular.module('real.planet').service('safetyService', ["$q", "baseFilterService", safetyService]);

    function safetyService($q, baseFilterService){
        var self = angular.extend(this, baseFilterService);

		self._file = "safety/real.planet.safety.json";

		self.name = "safety";

		self.icon = {i: true, class: "icon-safety-main", text: "Safety"};

		self.order = 3;

		self.options = [
				{alias:"green", text: "Safest", checked: false, icon: {i: true, class: "icon-safety-green-filter", cellWidth: "33%"}},
				{alias:"yellow", text: "Should be careful", checked: false, icon: {i: true, class: "icon-safety-yellow-filter", cellWidth: "34%"}},
				{alias:"red", text: "Always look around", checked: false, icon: {i: true, class: "icon-safety-red-filter", cellWidth: "33%"}}
			];

		self.load = function (path){
			return self.initialLoad(path + self._file).then(function(data){ self.data = data; });
		};

        self.setupCountry = function (feature) {
            return self.setup(feature);
        };

        self.setup = function (feature) {
            var item = self.getDataItem(feature, self.data);

            return item ? item.alias : 'gray';
        };

        self.evaluateCountry = function(feature){
        	self.activeCountry = self.getCountryOption(feature, self.options, self.setup);
        };
	}

})();


(function() {

    angular.module('real.planet').service('touristService', ["$q", "baseFilterService", touristService]);

    function touristService($q, baseFilterService){
        var self = angular.extend(this, baseFilterService);

		self._file = "tourist/real.planet.tourist.json";

		self.name = "tourist";

		self.icon = {i: true, class: "icon-tourists-main", text: "Tourists"};

		self.order = 4;

		self.options = [
				{alias:"blue", text: "You are white man", checked: false, icon: {i: true, class: "icon-tourists-green-filter", cellWidth: "25%"}},
				{alias:"green", text: "Messing around", checked: false, icon: {i: true, class: "icon-tourists-yellow-filter", cellWidth: "25%"}},
				{alias:"yellow", text: "Tourist grouping", checked: false, icon: {i: true, class: "icon-tourists-orange-filter", cellWidth: "25%"}},
				{alias:"red", text: "Tourist jam", checked: false, icon: {i: true, class: "icon-tourists-red-filter", cellWidth: "25%"}}
			];

		self.load = function (path){
			return self.initialLoad(path + self._file).then(function(data){ self.data = data; });
		};

        self.setupCountry = function (feature) {
            return self.setup(feature);
        };

        self.setup = function (feature) {
            var item = self.getDataItem(feature, self.data);

            return item ? item.alias : 'gray';
        };

        self.evaluateCountry = function(feature){
        	self.activeCountry = self.getCountryOption(feature, self.options, self.setup);
        };
    }

})();


(function() {

    angular.module('real.planet')
        .service('visaService', ["$q", "baseFilterService", visaService]);

    function visaService($q, baseFilterService){
        var self = angular.extend(this, baseFilterService);

        self._schengen = self._usa = false,

        self._file = "visa/{country}/round.world.visa.{country}.json",

        self.name = "visa",

        self.order = 1,

        self.icon = {i: true, class: "icon-visa-main", text: "Visa"},

        self.options = [
                {alias:"blue", text: "Home country", checked: true, icon: {i: true, class: "icon-home", cellWidth: "25%"}},
                {alias:"green", text: "Don't required", checked: true, icon: {i: true, class: "icon-visa-green-filter", cellWidth: "25%"}},
                {alias:"yellow", text: "On arrival or other", checked: true, icon: {i: true, class: "icon-visa-yellow-filter", cellWidth: "25%"}},
                {alias:"red", text: "Required", checked: true, icon: {i: true, class: "icon-visa-red-filter", cellWidth: "25%"}}
            ],

        self.initUserSettings = function(schengen, usa, country){
            self._schengen = schengen;
            self._usa = usa;
            self._country = country;
        }

        self.load = function (path){
            var filePath = self._file.replace("{country}", self._country).replace("{country}", self._country);
            return self.initialLoad(path + filePath).then(function(data){ self.data = data; });
        };

        self.setupCountry = function (feature) {
            return self.setup(feature);
        };

        self.setup = function (feature) {
            var visa = self.getDataItem(feature, self.data);
            var color = 'gray';

            if (visa != null) {
                if(self._schengen && visa.alias.schengen === "green"){
                    color = visa.alias.schengen;
                }

                if(self._usa && visa.alias.usa === "green"){
                    color = visa.alias.usa;
                }

                if(color != "green"){
                    color = visa.alias.general;
                }
            }

            return color;
        };

        self.addEvents = function(){
            $(document).on('change', 'input:checkbox[value="schengen"],input:checkbox[value="usa"]', function (event) {
                self._schengen = $('input:checkbox[value="schengen"]').is(":checked");
                self._usa = $('input:checkbox[value="usa"]').is(":checked");
            });
        };

        self.evaluateCountry = function(feature){
            self.activeCountry = self.getCountryOption(feature, self.options, self.setup);

            if(feature && self.activeCountry.text){
                var data = self.getDataItem(feature, self.data);
                if(data && data.shortInfo){
                    self.activeCountry.text = data.shortInfo;
                }
            }
        };
    }

})();


(function() {

    angular.module('real.planet').service('weatherService', ["$q", "baseFilterService", weatherService]);

    function weatherService($q, baseFilterService){
        var self = angular.extend(this, baseFilterService);

		self._selected = new Date().getMonth() + 1;

		self.name = "weather";

		self._file = "weather/real.planet.weather.json";

		self.icon = {i: true, class: "icon-weather-main", text: "Weather"};

		self.order = 6;

		self.options = [
				{alias:"white", text: "Below zero", checked: false, icon: {i: true, class: "icon-weather-red-filter", cellWidth: "20%"}},
				{alias:"blue", text: "Quite cold", checked: false, icon: {i: true, class: "icon-weather-orange-filter", cellWidth: "20%"}},
				{alias:"green", text: "Just right", checked: false, icon: {i: true, class: "icon-weather-yellow-filter", cellWidth: "20%"}},
				{alias:"yellow", text: "Comfortable", checked: false, icon: {i: true, class: "icon-weather-green-filter", cellWidth: "20%"}},
				{alias:"red", text: "Hot potato", checked: false, icon: {i: true, class: "icon-fire", cellWidth: "20%"}}
			];

		self.months = [{index: 1, name: "Jan", class:"width-33 divider-border-vertical-right"},
				{index: 2, name: "Feb", class:"width-34 divider-border-vertical-center"},
				{index: 3, name: "Mar", class:"width-33 divider-border-vertical-left"},
				{index: 4, name: "Apr", class:"width-33 divider-border-vertical-right"},
				{index: 5, name: "May", class:"width-34 divider-border-vertical-center"},
				{index: 6, name: "June", class:"width-33 divider-border-vertical-left"},
				{index: 7, name: "July", class:"width-33 divider-border-vertical-right"},
				{index: 8, name: "Aug", class:"width-34 divider-border-vertical-center"},
				{index: 9, name: "Sept", class:"width-33 divider-border-vertical-left"},
				{index: 10, name: "Oct", class:"width-33 divider-border-vertical-right"},
				{index: 11, name: "Now", class:"width-34 divider-border-vertical-center"},
				{index: 12, name: "Dec", class:"width-33 divider-border-vertical-left"}];

		self.monthPanel = function(){return $("#monthPanel");};

		self.load = function (path){
			return self.initialLoad(path + self._file).then(function(data){ self.data = data; });
		};

		self.setup = function (feature) {

			var color = 'gray';

			var weather = self.getDataItem(feature, self.data);

			if (weather != null) {
				var month = $.grep(weather.months, function (e) { return e.number === self._selected; });
				color = month[0].alias;
			}

			return color;
		};

		self.setupMonth = function (feature, index) {
			var color = 'gray';

			var weather = self.getDataItem(feature, self.data);

			if (weather != null) {
				var month = $.grep(weather.months, function (e) { return e.number === index; });
				color = month[0].alias;
			}

			return color;
		};

		self.evaluateCountry = function(feature){
			if(feature){
				$(self.months).filter(function(){
					this.alias = self.setupMonth(feature, this.index);
					var a = this.alias;
					this.icon = self.getCountryOption(feature, self.options, function(){return a;});
					return true;
				});
				self.monthPanel().show();
				self.activeCountry = {};
			}else{
				$(self.months).filter(function(){
					this.alias = null;
					this.icon = null;
					return true;
				});
				self.monthPanel().hide();
				self.activeCountry = null;
			}
		};

		self.evaluateGlobal = function(activeFilters){
			var showMonthPanel = $.grep(activeFilters, function (e) { return e.name === self.name; }).length > 0;
			if(showMonthPanel){
				self.monthPanel().show();
			}else{
				self.monthPanel().hide();
			}
		};

	}

})();
